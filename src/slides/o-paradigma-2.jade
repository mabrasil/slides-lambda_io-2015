section

  section.sec-slide(data-background="#d35400")

    h2.white.upper O paradigma
    h1.white.upper Funcional

  section.sec-slide.left

    h3 Pure Functions

    pre
      code.
        --| Exemplos

        quadrado :: Integer -> Integer
        quadrado x = x * x

        somaTres :: Integer -> Integer -> Integer -> Integer
        somaTres x y z = x + y + z

        fatorial :: Integer -> Integer
        fatorial n = product [1..n]

  section.sec-slide.left

    h3 High-Order Functions

    pre
      code.
        --| Exemplos

        map :: (a -> b) -> [a] -> [b]
        filter :: (a -> Bool) -> [a] -> [a]

  section.sec-slide.left

    h3 First Class Functions

    pre
      code.
        var add = function(a, b){
          return a + b
        }

  section.sec-slide.left

    h3 Pattern Matching

    pre
      code.
        checaIntervalo :: (Integral a) => a -> String
        checaIntervalo 1 = "Um"
        checaIntervalo 2 = "Dois"
        checaIntervalo 3 = "Três"
        checaIntervalo 4 = "Quatro"
        checaIntervalo 5 = "Cinco"
        checaIntervalo x = "Não tá no intervalo"

  section.sec-slide.left

    h3 List Comprehensions

    pre
      code.
        quadrado = [ x*x | x <- nums, x > 2 ]

        -- | Se lembram do map?
        [x+3 | x <- [1,5,3,1,6]]

        -- | Com um predicado...
        [ 2*x | x <- [0..], x^2 > 3 ]

  section.sec-slide.left

    h3 Curry/Uncurry

    pre
      code.
        curry :: ((a, b) -> c) -> a -> b -> c
        uncurry :: (a -> b -> c) -> (a, b) -> c
